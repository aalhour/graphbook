# Copyright (C) 2009--2011 Minh Van Nguyen <nguyenminh2@gmail.com>
#
# Figure created using the following code.
# def int2binary(m, n):
#    '''
#    returns GF(2) vector of length n obtained
#    from the binary repr of m, padded by 0's
#    (on the left) to length n.
#
#    EXAMPLES:
#        sage: for j in range(8):
#        ....:     print int2binary(j,3)+int2binary(int(j/2),3)
#        ....:
#        (0, 0, 0)
#        (0, 0, 1)
#        (0, 1, 1)
#        (0, 1, 0)
#        (1, 1, 0)
#        (1, 1, 1)
#        (1, 0, 1)
#        (1, 0, 0)
#    '''
#    s = bin(m)
#    k = len(s)
#    F = GF(2)
#    b = [F(0)]*n
#    for i in range(2,k):
#        b[n-k+i] = F(int(s[i]))
#    return vector(b)
#
# def binary2int(b):
#    "''
#    inverts int2binary
#
#    "''
#    k = len(b)
#    n = sum([int(b[i])*2**(k-1-i) for i in range(k)])
#    return n
#
# def graycodeword(m, n):
#    '''
#    returns the mth codeword in the reflected binary Gray code
#    of length n.
#
#    EXAMPLES:
#        sage: graycodeword(3,3)
#        (0, 1, 0)
#    '''
#    return int2binary(m,n)+int2binary(int(m/2),n)
#
# sage: L = [(k,binary2int(graycodeword(k, 8))) for k in range(256)]
# sage: P = list_plot(L); P.save(``graycode-gamma8.png'')
#
# x  y
0 0
1 1
2 3
3 2
4 6
5 7
6 5
7 4
8 12
9 13
10 15
11 14
12 10
13 11
14 9
15 8
16 24
17 25
18 27
19 26
20 30
21 31
22 29
23 28
24 20
25 21
26 23
27 22
28 18
29 19
30 17
31 16
32 48
33 49
34 51
35 50
36 54
37 55
38 53
39 52
40 60
41 61
42 63
43 62
44 58
45 59
46 57
47 56
48 40
49 41
50 43
51 42
52 46
53 47
54 45
55 44
56 36
57 37
58 39
59 38
60 34
61 35
62 33
63 32
64 96
65 97
66 99
67 98
68 102
69 103
70 101
71 100
72 108
73 109
74 111
75 110
76 106
77 107
78 105
79 104
80 120
81 121
82 123
83 122
84 126
85 127
86 125
87 124
88 116
89 117
90 119
91 118
92 114
93 115
94 113
95 112
96 80
97 81
98 83
99 82
100 86
101 87
102 85
103 84
104 92
105 93
106 95
107 94
108 90
109 91
110 89
111 88
112 72
113 73
114 75
115 74
116 78
117 79
118 77
119 76
120 68
121 69
122 71
123 70
124 66
125 67
126 65
127 64
128 192
129 193
130 195
131 194
132 198
133 199
134 197
135 196
136 204
137 205
138 207
139 206
140 202
141 203
142 201
143 200
144 216
145 217
146 219
147 218
148 222
149 223
150 221
151 220
152 212
153 213
154 215
155 214
156 210
157 211
158 209
159 208
160 240
161 241
162 243
163 242
164 246
165 247
166 245
167 244
168 252
169 253
170 255
171 254
172 250
173 251
174 249
175 248
176 232
177 233
178 235
179 234
180 238
181 239
182 237
183 236
184 228
185 229
186 231
187 230
188 226
189 227
190 225
191 224
192 160
193 161
194 163
195 162
196 166
197 167
198 165
199 164
200 172
201 173
202 175
203 174
204 170
205 171
206 169
207 168
208 184
209 185
210 187
211 186
212 190
213 191
214 189
215 188
216 180
217 181
218 183
219 182
220 178
221 179
222 177
223 176
224 144
225 145
226 147
227 146
228 150
229 151
230 149
231 148
232 156
233 157
234 159
235 158
236 154
237 155
238 153
239 152
240 136
241 137
242 139
243 138
244 142
245 143
246 141
247 140
248 132
249 133
250 135
251 134
252 130
253 131
254 129
255 128
